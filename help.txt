Help on module visit_writer:

NAME
    visit_writer - This module writes out files that are accessible to VisIt.

FILE
    /panfs/storage.local/coaps/home/ndc08/code/converter/libs/lib64/visit_writer.so

DESCRIPTION
    It contains 5 methods:
    
    WritePointMesh(fileName, useBinary, points, vars )
    WriteUnstructuredMesh(fileName, useBinary, points, connectivity, vars )
    WriteRegularMesh(fileName, useBinary, dimensions, vars )
    WriteRectilinearMesh(fileName, useBinary, x, y, z, vars )
    WriteCurvilinearMesh(fileName, useBinary, dimensions, points, vars )
    
    In the following:
      1) an array can be either a python list or a python tuple.
      2) a number is either a float or an integer.
         For example [1, 3.14, 5, 6, 7.77] is an array of numbers.
    
    The arguments for the methods are defined as:
        fileName:     a string containing the name of the visIt file to create
    
        useBinary:    an integer (0 produces ASCII output, all else produce
                                  Binary output)
    
        points:       a number array containing the points data of
                      length 3 * numberOfPoints
                        (i.e. [ x1, y1, z1, x2, y2, z2, x3, ..., xn, yn, zn ])
    
        vars:         an array of var datum.
    
        var datum: an array of [ name, dimension, centering, arrayOfValues ]
        name:          a string
        dimension:     an integer; either 1 for scalar or 3 for vector
        centering:     an integer; (0 is cell-wise, all else is point-wise)
        arrayOfValues: an array of numbers of length dimension * numberOfPoints
    
        connectivity:  an array of connectivity datum.
        connectivity datum: array of [ ConnectivityObject, index1,index2,..indexn ]
        index:          an integer
    
        ConnectivityObject: an integer or a string
    
        Possible values for ConnectivityObject and number of indices required for
        each are:
             integer             | string        , number of indices
        -------------------------------------------------------------
        visit_writer.vertex      | 'vertex'      ,         1
        visit_writer.line        | 'line'        ,         2
        visit_writer.triangle    | 'triangle'    ,         3
        visit_writer.quad        | 'quad'        ,         4
        visit_writer.pixel       | 'pixel'       ,         4
        visit_writer.tetrahedron | 'tetrahedron' ,         4
        visit_writer.hexahedron  | 'hexahedron'  ,         8
        visit_writer.voxel       | 'voxel'       ,         8
        visit_writer.wedge       | 'wedge'       ,         6
        visit_writer.pyramid     | 'pyramid'     ,         5
    
        dimensions:     an array of the 3 integers [nx, ny, nz];
                        numberOfPoints = nx * ny * nz
        x, y or z:      an array of numbers (i.e., [c1, c2, c3, c4, ... cn]
                                             where ci is either x, y or z)

FUNCTIONS
    WriteCurvilinearMesh(...)
        WriteCurvilinearMesh( fileName, useBinary, Mesh, nameDimensionAndVariables )
        See modules documentation for more information.
    
    WritePointMesh(...)
        WritePointMesh( fileName, useBinary, points, nameDimensionAndVariables )
        See modules documentation for more information.
    
    WriteRectilinearMesh(...)
        WriteRectilinearMesh( fileName, useBinary, x, y, z, nameDimensionAndVariables )
        See modules documentation for more information.
    
    WriteRegularMesh(...)
        WriteRegularMesh( fileName, useBinary, dimensions, nameDimensionAndVariables )
        See modules documentation for more information.
    
    WriteUnstructuredMesh(...)
        WriteUnstructuredMesh( fileName, useBinary, points, cellTypeConnections, nameDimensionAndVariables )
        See modules documentation for more information.

DATA
    hexahedron = 12
    line = 3
    pixel = 8
    pyramid = 14
    quad = 9
    tetrahedron = 10
    triangle = 5
    version = '1.0'
    vertex = 1
    voxel = 11
    wedge = 13


